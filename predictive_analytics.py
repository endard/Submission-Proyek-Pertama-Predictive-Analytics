# -*- coding: utf-8 -*-
"""Another copy of predictive_analytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dStDzQjL9oxF6c-saFBZU0_I37FHb8Ul

# Import Library & Dataset


*   Mengimpor library yang dibutuhkan
*   Load dataset harga rumah
"""

# Import library
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error

# Load data
data = pd.read_csv('/content/drive/MyDrive/Content/Housing Price Dataset/housing_price_dataset.csv')

"""# Data Understanding


*   Menampilkan informasi dataset
*   Menampilkan deskripsi dataset pada kolom nominal
*   Menampilkan 5 data teratas
*   Menampilkan grafik distribusi harga rumah
*   Menampilkan plot hubungan luas rumah dan harga rumah
*   Menampilkan grafik distribusi jumlah kamar
*   Menampilkan boxplot harga rumah berdasarkan jumlah kamar
*   Menampilkan grafik distribusi rata-rata harga rumah berdasarkan lokasi neighborhood
*   Menampilkan grafik harga rata-rata rumah berdasarkan tahun pembangunan
*   Mengecek apakah terdapat missing value
*   Mengecek apakah terdapat data duplikat










"""

# Exploratory data analysis
data.info()

# Deskripsi dataset
data.describe()

data.head(5)

# Distribusi Harga Rumah
plt.figure(figsize=(8,5))
sns.histplot(data['Price'], kde=True, color='blue')
plt.title('Distribusi Harga Rumah')
plt.xlabel('Harga')
plt.ylabel('Jumlah')
plt.show()

# Hubungan Luas Rumah vs Harga
plt.figure(figsize=(8,5))
sns.scatterplot(x=data['SquareFeet'], y=data['Price'])
plt.title('Hubungan Luas Rumah vs Harga')
plt.xlabel('Luas Rumah')
plt.ylabel('Harga')
plt.show()

# Distribusi Jumlah Kamar Tidur
plt.figure(figsize=(6,4))
sns.countplot(x=data['Bedrooms'], palette='viridis')
plt.title('Distribusi Jumlah Kamar Tidur')
plt.xlabel('Jumlah Kamar Tidur')
plt.ylabel('Jumlah Rumah')
plt.show()

# Boxplot Harga Berdasarkan Jumlah Kamar Tidur
plt.figure(figsize=(8,5))
sns.boxplot(x=data['Bedrooms'], y=data['Price'])
plt.title('Boxplot Harga Berdasarkan Jumlah Kamar Tidur')
plt.xlabel('Jumlah Kamar Tidur')
plt.ylabel('Harga')
plt.show()

# Harga Rata-rata Rumah Berdasarkan Neighborhood
plt.figure(figsize=(12,6))
sns.barplot(x=data['Neighborhood'], y=data['Price'], estimator=np.mean, ci=None)
plt.title('Harga Rata-rata Rumah Berdasarkan Neighborhood')
plt.xticks(rotation=45)
plt.xlabel('Neighborhood')
plt.ylabel('Harga Rata-rata')
plt.show()

# Harga Rata-Rata Rumah Berdasarkan Tahun Pembangunan
plt.figure(figsize=(12,6))
year_price = data.groupby('YearBuilt')['Price'].mean().reset_index()

sns.lineplot(data=year_price, x='YearBuilt', y='Price')
plt.title('Harga Rata-Rata Rumah Berdasarkan Tahun Pembangunan')
plt.xlabel('Tahun Dibangun')
plt.ylabel('Harga Rata-Rata')
plt.grid(True)
plt.show()

# Pengecekan missing value
data.isna().sum()

# Cek data duplikat
duplicate_rows = data[data.duplicated()]
print("Jumlah data duplikat:", len(duplicate_rows))
duplicate_rows

"""# Data Preparation

*   Mengkonversi kolom Neighborhood
*   Mengubah kolom YearBuilt dengan membangun kolom BuildingAge
*   Split dataset dengan perbandingan 80:20
*   Scaling data numerik dengan StandardScaler




"""

# Konversi kolom Neighborhood dengan One-hot Encoding
data_encoded = pd.get_dummies(data, columns=['Neighborhood'], drop_first=False).astype(int)

# Inisialisasi tahun sekarang
current_year = pd.Timestamp.now().year

# Hitung BuildingAge dan tambahkan kolomnya
data_encoded['BuildingAge'] = current_year - data_encoded['YearBuilt']

data_encoded = data_encoded.drop('YearBuilt', axis=1)

data_encoded.head(5)

# Pisahkan features dan target
X = data_encoded.drop('Price', axis=1)
y = data_encoded['Price']

# Split train-test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scaling data kolom numerik
numerical_features = ['SquareFeet', 'Bedrooms', 'Bathrooms', 'BuildingAge']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train[numerical_features])
X_train[numerical_features].head()

X_test[numerical_features] = scaler.transform(X_test[numerical_features])

X_train.head()

"""# Modeling

*   Membuat model prediksi dengan algoritma K-Nearest Neighbors
*   Membuat model prediksi dengan algoritma Random Forest
*   Membuat model prediksi dengan algoritma AdaBoost



"""

# Siapkan dataframe untuk analisis model
models = pd.DataFrame(index=['train_mse', 'test_mse'],
                      columns=['KNN', 'RandomForest', 'Boosting'])

# Prediksi dengan K-Nearest Neighbors
knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(X_train, y_train)

models.loc['train_mse','knn'] = mean_squared_error(y_pred = knn.predict(X_train), y_true=y_train)

# Prediksi dengan Random Forest
RF = RandomForestRegressor(n_estimators=24, max_depth=8, random_state=42, n_jobs=-1)
RF.fit(X_train, y_train)

models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

# Prediksi dengan AdaBoost
boosting = AdaBoostRegressor(learning_rate=0.05, random_state=42)
boosting.fit(X_train, y_train)

models.loc['train_mse','Boosting'] = mean_squared_error(y_pred=boosting.predict(X_train), y_true=y_train)

"""# Evaluation


*   Mengevaluasi model yang telah dibangun dengan menggunakan Mean Squared Error
*   Memilih model terbaik untuk digunakan dalam prediksi harga rumah


"""

# Buat variabel MSE yang isinya adalah dataframe nilai MSE data train dan test pada masing-masing algoritma
mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF','Boosting'])

# Buat dictionary untuk setiap algoritma yang digunakan
model_dict = {'KNN': knn, 'RF': RF, 'Boosting': boosting}

# Hitung Mean Squared Error masing-masing algoritma pada data train dan test
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e5
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e5

# Panggil MSE
mse

# Visualisasi perbandingan MSE

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

# Menampilkan perbandingan hasil prediksi model pada data test
prediksi = X_test.iloc[:5].copy()
pred_dict = {'y_true':y_test[:5]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)

pd.DataFrame(pred_dict)

# Menungkapkan fitur yang paling berpengaruh dalam prediksi harga rumah menurut algoritma Random Forest
importances = pd.Series(RF.feature_importances_, index=X_train.columns)
print(importances.sort_values(ascending=False))